def utilScript
def parametersScript
def config

pipeline {
    agent { label "win-genexus" }
    parameters {
        choice(name: "KBEnvironment", choices: ["EnvStable", "EnvRelease"], description: "Select KB Environment to Deploy")
        choice(name: "VersionEnvironment", choices: ["web", "tareasProg", "mobile", "all"], description: "Select Version Environment to Deploy")
        choice(name: "VersionMobile", choices: ["none", "v1", "v2", "v3"], description: "Select Version Mobile Deploy")
    }
    stages {
        stage("Init") {
            steps {
                echo "Initializing.."
                script {
                    utilScript = load "jobs\\jenkinsfiles\\common\\util.groovy"
                    parametersScript = load "jobs\\jenkinsfiles\\${JOB_NAME.split("/")[0]}\\parameters.groovy"
                    config = parametersScript.getForEnvironment(params.KBEnvironment, params.VersionEnvironment)
                }
            }            
        }
        stage("Update KB") {
            steps {
                echo "Updating KB.."
                script {

                    withCredentials([
                        usernamePassword(
                        credentialsId: config.GXServer.GXServerCredentialsKey, 
                        usernameVariable: 'Username', 
                        passwordVariable: 'Password')
                        ]) {
                             
                        def buildProps = utilScript.getMSBuildParams(config.General) + 
                        utilScript.getMSBuildParams(config.GXServer) + 
                        utilScript.makeParam("GXServerUsername", Username) + 
                        utilScript.makeParam("GXServerPassword", Password)

                        bat "msbuild.exe ${buildProps} /tv:4.0 /verbosity:normal \"jobs\\jenkinsfiles\\common\\update_kb.msbuild\""                 
                        
                    }     
                }
            }
        }
        stage("Set Properties") {
            steps {
                echo "Setting Properties.."
                script {
                    withCredentials([
                        usernamePassword(
                        credentialsId: config.Environment.GAMAdminCredentialKey, 
                        usernameVariable: 'AdminUsername', 
                        passwordVariable: 'AdminPassword'),
                        
                        usernamePassword(
                        credentialsId: config.Environment.GAMConnectionCredentialKey, 
                        usernameVariable: 'ConnectionUsername', 
                        passwordVariable: 'ConnectionPassword')

                        ]) {    

                            def envProps = utilScript.getMSBuildParams(config.General) + 
                            utilScript.getMSBuildParams(config.Environment) + 
                            utilScript.makeParam("GAMAdminUsername", AdminUsername) + 
                            utilScript.makeParam("GAMAdminPassword", AdminPassword) +
                            utilScript.makeParam("GAMConnectionUsername", ConnectionUsername) + 
                            utilScript.makeParam("GAMConnectionPassword", ConnectionPassword)

                            bat "msbuild.exe ${envProps} /tv:4.0 /verbosity:normal \"jobs\\jenkinsfiles\\common\\set_environment_properties.msbuild\""
                       
                    }
                    
                    config.Datastores.each { ds ->

                        withCredentials([

                            usernamePassword(
                            credentialsId: config.Datastores[ds.key].CredentialId == null ? "${ds.key}_${config.General.DeploymentPlatform}" : config.Datastores[ds.key].CredentialId, 
                            usernameVariable: 'user', 
                            passwordVariable: 'password')                            

                        ]) {
            
                            def dsProps = utilScript.getMSBuildParams(config.General) + 
                            utilScript.makeParam("DatastoreName", ds.key) + 
                            utilScript.makeParam("DatastoreUsername", user) + 
                            utilScript.makeParam("DatastorePassword", password) + 
                            utilScript.getMSBuildParams(config.Datastores[ds.key])

                            bat "msbuild.exe ${dsProps} /tv:4.0 /verbosity:normal \"jobs\\jenkinsfiles\\common\\set_datastore_properties.msbuild\""
                        }  
                    }

                    if (config.General.DeploymentPlatform == "Azure") {
                        if (params.VersionMobile != "none") {
                            config.SDGenerator.SmartDevicesServicesURL += "${params.VersionMobile}"
                        }
                        else {
                            config.SDGenerator.SmartDevicesServicesURL += "web"
                        }
                    }

                    def sdProps = utilScript.getMSBuildParams(config.General) + utilScript.getMSBuildParams(config.SDGenerator)
                    bat "msbuild.exe ${sdProps} /tv:4.0 /verbosity:normal \"jobs\\jenkinsfiles\\common\\set_sd_generator_properties.msbuild\""
                    
                    config.SDMainObjects.each { obj ->
                        def mainProps = utilScript.getMSBuildParams(config.General) + "/p:SmartDevicesMainObject=\"${obj.key}\" " + utilScript.getMSBuildParams(config.SDMainObjects[obj.key])
                        bat "msbuild.exe ${mainProps} /tv:4.0 /verbosity:normal \"jobs\\jenkinsfiles\\common\\set_sd_main_properties.msbuild\""
                    }                                 
                }
            }
        }
        stage("Build All") {
            when {
                anyOf {
                    equals(actual: JOB_NAME, expected: "${config.General.Name}/Build_KB")
                    equals(actual: JOB_NAME, expected: "${config.General.Name}/Deploy_KB")
                }
            }
            steps {
                echo "Building All.."
                script {
                    def buildProps = utilScript.getMSBuildParams(config.General)
                    bat "msbuild.exe ${buildProps} /tv:4.0 /verbosity:normal \"jobs\\jenkinsfiles\\common\\build_kb.msbuild\""
                }
            }
        }
        stage("Package Deployment Units") {
            when {
                equals(actual: JOB_NAME, expected: "${config.General.Name}/Deploy_KB")
            }            
            steps {
                echo "Packing Deployment Units.."
                script {                    
                    config.DeploymentUnits.each { du ->

                        if (params.VersionEnvironment == config.DeploymentUnits[du.key].VersionEnvironment || params.VersionEnvironment == "all") {

                            def duProps = utilScript.getMSBuildParams(config.General) + "/p:DeploymentUnit=\"${du.key}\" " + utilScript.getMSBuildParams(config.DeploymentUnits[du.key])

                            bat utilScript.copyFile("jobs\\jenkinsfiles\\${config.General.Name}\\${du.key}_user.gxdproj", 
                            "${config.General.EnvironmentWebFolder}\\")

                            bat "msbuild.exe ${duProps} /tv:4.0 /verbosity:normal \"jobs\\jenkinsfiles\\common\\prepare_deploy.msbuild\""
                            bat "msbuild.exe ${duProps} /tv:4.0 /verbosity:normal \"${config.General.EnvironmentWebFolder}\\${config.DeploymentUnits[du.key].DeployProjectName}.gxdproj\""                            
                            
                        }
                    }
                }
            }
        }
        stage("Publish WebApps") {
            when {
                equals(actual: JOB_NAME, expected: "${config.General.Name}/Deploy_KB")
            }                        
            steps {
                echo "Publishing WebApps.."
                script {   
                    config.DeploymentUnits.each { du ->
                        if(config.General.DeploymentPlatform == 'OKD') {

                            dir("${config.Git.GitFolder}\\") {

                                if(!fileExists("${config.Git.GitEnvFolder}\\")) {
                                    bat utilScript.cloneRepo(params.KBEnvironment, config.Git.GitEnvironment, config.General.Name)      
                                } 
                            }  

                            dir("${config.Git.GitEnvFolder}\\") {                                 
                            
                                bat utilScript.copyFile("${config.DeploymentUnits[du.key].DeployFullPath}.war", 
                                "${config.Git.GitEnvFolder}\\${config.DeploymentUnits[du.key].DeployWebappName}.war")         

                                bat utilScript.gitCheckout(config.Git.GitEnvironment)
                                bat utilScript.gitAdd("${config.DeploymentUnits[du.key].DeployWebappName}.war")
                                bat utilScript.gitCommit(config.DeploymentUnits[du.key].DeployFullPath)
                                bat utilScript.gitPull()
                                bat utilScript.gitPush()

                            }                         
                        }           
                        else if (config.General.DeploymentPlatform == 'Azure') {


                            withCredentials([

                                usernamePassword(
                                credentialsId: config.General.WebAppName, 
                                usernameVariable: 'user', 
                                passwordVariable: 'pass')                            

                            ]) {

                                if(params.VersionEnvironment == 'web' && du.key == 'WebAppDeploy') {
                                
                                    bat utilScript.deployAzure( user, pass, "${config.DeploymentUnits[du.key].DeployFullPath}.zip", "${config.DeploymentUnits[du.key].ApiURL}/${params.VersionEnvironment}")
                                
                                }

                                else if (params.VersionEnvironment == 'tareasProg' && du.key == 'TareasProgramadasDeploy') {   

                                    bat utilScript.deployTareasProgramadasAzure("${config.DeploymentUnits[du.key].DeployFullPath}.zip", config.General.TaskDir)     

                                } 

                                else if (params.VersionEnvironment == 'mobile' && params.VersionMobile != 'none' && du.key == 'MobileAppDeploy') {

                                    bat utilScript.deployAzure( user, pass, "${config.DeploymentUnits[du.key].DeployFullPath}.zip", "${config.DeploymentUnits[du.key].ApiURL}/${params.VersionMobile}")

                                }                                   
                            }      
                        }                               
                    }                    
                }
            }
        }
        // stage ("Publish MobileApps") {
        //     when {
        //         equals(actual: JOB_NAME, expected: "${config.General.Name}/Deploy_KB")
        //         equals(actual: params.VersionEnvironment, expected: "mobile")
        //         anyOf {
        //             equals(actual: params.VersionMobile, expected: "v1")
        //             equals(actual: params.VersionMobile, expected: "v2")
        //             equals(actual: params.VersionMobile, expected: "v3")

        //         }
        //     }
        //     steps {
        //         script {   
        //             config.SDMainObjects.each { obj ->

        //                 if(config.SDGenerator.SmartDevicesBuildAndroid.equals("True")) {
        //                     def targetApk = "${env.WORKSPACE}\\${obj.key}${config.General.VersionSuffix}.apk"
        //                     bat utilScript.copyFile(config.SDMainObjects[obj.key].SmartDevicesAndroidAPK, targetApk)
        //                     bat utilScript.appcenterUpload(config.AppCenter.AppCenterToken, config.AppCenter.AppCenterOwner, "${config.SDMainObjects[obj.key].AppCenterNameAndroid}", config.AppCenter.AppCenterGroup, targetApk)
        //                 }            
        //             }            
        //         }
        //     }            
        // }    
    }
}